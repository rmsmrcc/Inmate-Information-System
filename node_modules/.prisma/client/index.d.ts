
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = {
  id: string
  email_admin: string
  password_admin: string | null
  createdAt: Date
  shift: number
}

/**
 * Model Visitor
 * 
 */
export type Visitor = {
  id: string
  email_visitor: string
  password_visitor: string | null
  createdAt: Date
  shift: number
}

/**
 * Model InmateRecord
 * 
 */
export type InmateRecord = {
  id: string
  inmateNo: string | null
  cellBlock: string | null
  lastname: string | null
  firstname: string | null
  middlename: string | null
  suffix: string | null
  perAdd: string | null
  gender: string | null
  bday: string | null
  civilstatus: string | null
  eyeColor: string | null
  crimeCom: string | null
  sentence: string | null
  dateStart: string | null
  dateEnd: string | null
  elastname: string | null
  efirstname: string | null
  emiddlename: string | null
  esuffix: string | null
  eperAdd: string | null
  relationship: string | null
  contact: string | null
}

/**
 * Model VisitSched
 * 
 */
export type VisitSched = {
  id: string
  visitorId: string
  inmateNo: string | null
  cellBlock: string | null
  lastname: string | null
  firstname: string | null
  middlename: string | null
  suffix: string | null
  gender: string | null
  bday: string | null
  vlastname: string | null
  vfirstname: string | null
  vmiddlename: string | null
  vsuffix: string | null
  vperAdd: string | null
  timeVisit: string | null
  dateVisit: string | null
  relationship: string | null
  contact: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number }): Promise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<GlobalReject>;

  /**
   * `prisma.visitor`: Exposes CRUD operations for the **Visitor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Visitors
    * const visitors = await prisma.visitor.findMany()
    * ```
    */
  get visitor(): Prisma.VisitorDelegate<GlobalReject>;

  /**
   * `prisma.inmateRecord`: Exposes CRUD operations for the **InmateRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InmateRecords
    * const inmateRecords = await prisma.inmateRecord.findMany()
    * ```
    */
  get inmateRecord(): Prisma.InmateRecordDelegate<GlobalReject>;

  /**
   * `prisma.visitSched`: Exposes CRUD operations for the **VisitSched** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VisitScheds
    * const visitScheds = await prisma.visitSched.findMany()
    * ```
    */
  get visitSched(): Prisma.VisitSchedDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    Visitor: 'Visitor',
    InmateRecord: 'InmateRecord',
    VisitSched: 'VisitSched'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type VisitorCountOutputType
   */


  export type VisitorCountOutputType = {
    visitSched: number
  }

  export type VisitorCountOutputTypeSelect = {
    visitSched?: boolean
  }

  export type VisitorCountOutputTypeGetPayload<S extends boolean | null | undefined | VisitorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? VisitorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (VisitorCountOutputTypeArgs)
    ? VisitorCountOutputType 
    : S extends { select: any } & (VisitorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof VisitorCountOutputType ? VisitorCountOutputType[P] : never
  } 
      : VisitorCountOutputType




  // Custom InputTypes

  /**
   * VisitorCountOutputType without action
   */
  export type VisitorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VisitorCountOutputType
     */
    select?: VisitorCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Admin
   */


  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    shift: number | null
  }

  export type AdminSumAggregateOutputType = {
    shift: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    email_admin: string | null
    password_admin: string | null
    createdAt: Date | null
    shift: number | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    email_admin: string | null
    password_admin: string | null
    createdAt: Date | null
    shift: number | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    email_admin: number
    password_admin: number
    createdAt: number
    shift: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    shift?: true
  }

  export type AdminSumAggregateInputType = {
    shift?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    email_admin?: true
    password_admin?: true
    createdAt?: true
    shift?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    email_admin?: true
    password_admin?: true
    createdAt?: true
    shift?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    email_admin?: true
    password_admin?: true
    createdAt?: true
    shift?: true
    _all?: true
  }

  export type AdminAggregateArgs = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs = {
    where?: AdminWhereInput
    orderBy?: Enumerable<AdminOrderByWithAggregationInput>
    by: AdminScalarFieldEnum[]
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }


  export type AdminGroupByOutputType = {
    id: string
    email_admin: string
    password_admin: string | null
    createdAt: Date
    shift: number
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect = {
    id?: boolean
    email_admin?: boolean
    password_admin?: boolean
    createdAt?: boolean
    shift?: boolean
  }


  export type AdminGetPayload<S extends boolean | null | undefined | AdminArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Admin :
    S extends undefined ? never :
    S extends { include: any } & (AdminArgs | AdminFindManyArgs)
    ? Admin 
    : S extends { select: any } & (AdminArgs | AdminFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Admin ? Admin[P] : never
  } 
      : Admin


  type AdminCountArgs = 
    Omit<AdminFindManyArgs, 'select' | 'include'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdminFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Admin'> extends True ? Prisma__AdminClient<AdminGetPayload<T>> : Prisma__AdminClient<AdminGetPayload<T> | null, null>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdminFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Admin'> extends True ? Prisma__AdminClient<AdminGetPayload<T>> : Prisma__AdminClient<AdminGetPayload<T> | null, null>

    /**
     * Find the first Admin that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs>(
      args?: SelectSubset<T, AdminFindManyArgs>
    ): Prisma.PrismaPromise<Array<AdminGetPayload<T>>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs>(
      args: SelectSubset<T, AdminCreateArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs>(
      args?: SelectSubset<T, AdminCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs>(
      args: SelectSubset<T, AdminDeleteArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs>(
      args: SelectSubset<T, AdminUpdateArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs>(
      args?: SelectSubset<T, AdminDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs>(
      args: SelectSubset<T, AdminUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs>(
      args: SelectSubset<T, AdminUpsertArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Find zero or more Admins that matches the filter.
     * @param {AdminFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const admin = await prisma.admin.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AdminFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Admin.
     * @param {AdminAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const admin = await prisma.admin.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AdminAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdminClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Admin base type for findUnique actions
   */
  export type AdminFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUnique
   */
  export interface AdminFindUniqueArgs extends AdminFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin base type for findFirst actions
   */
  export type AdminFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: Enumerable<AdminScalarFieldEnum>
  }

  /**
   * Admin findFirst
   */
  export interface AdminFindFirstArgs extends AdminFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * Admin findMany
   */
  export type AdminFindManyArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * Admin create
   */
  export type AdminCreateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }


  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs = {
    /**
     * The data used to create many Admins.
     */
    data: Enumerable<AdminCreateManyInput>
  }


  /**
   * Admin update
   */
  export type AdminUpdateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }


  /**
   * Admin upsert
   */
  export type AdminUpsertArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }


  /**
   * Admin delete
   */
  export type AdminDeleteArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }


  /**
   * Admin findRaw
   */
  export type AdminFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Admin aggregateRaw
   */
  export type AdminAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Admin without action
   */
  export type AdminArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
  }



  /**
   * Model Visitor
   */


  export type AggregateVisitor = {
    _count: VisitorCountAggregateOutputType | null
    _avg: VisitorAvgAggregateOutputType | null
    _sum: VisitorSumAggregateOutputType | null
    _min: VisitorMinAggregateOutputType | null
    _max: VisitorMaxAggregateOutputType | null
  }

  export type VisitorAvgAggregateOutputType = {
    shift: number | null
  }

  export type VisitorSumAggregateOutputType = {
    shift: number | null
  }

  export type VisitorMinAggregateOutputType = {
    id: string | null
    email_visitor: string | null
    password_visitor: string | null
    createdAt: Date | null
    shift: number | null
  }

  export type VisitorMaxAggregateOutputType = {
    id: string | null
    email_visitor: string | null
    password_visitor: string | null
    createdAt: Date | null
    shift: number | null
  }

  export type VisitorCountAggregateOutputType = {
    id: number
    email_visitor: number
    password_visitor: number
    createdAt: number
    shift: number
    _all: number
  }


  export type VisitorAvgAggregateInputType = {
    shift?: true
  }

  export type VisitorSumAggregateInputType = {
    shift?: true
  }

  export type VisitorMinAggregateInputType = {
    id?: true
    email_visitor?: true
    password_visitor?: true
    createdAt?: true
    shift?: true
  }

  export type VisitorMaxAggregateInputType = {
    id?: true
    email_visitor?: true
    password_visitor?: true
    createdAt?: true
    shift?: true
  }

  export type VisitorCountAggregateInputType = {
    id?: true
    email_visitor?: true
    password_visitor?: true
    createdAt?: true
    shift?: true
    _all?: true
  }

  export type VisitorAggregateArgs = {
    /**
     * Filter which Visitor to aggregate.
     */
    where?: VisitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitors to fetch.
     */
    orderBy?: Enumerable<VisitorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VisitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Visitors
    **/
    _count?: true | VisitorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VisitorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VisitorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisitorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisitorMaxAggregateInputType
  }

  export type GetVisitorAggregateType<T extends VisitorAggregateArgs> = {
        [P in keyof T & keyof AggregateVisitor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisitor[P]>
      : GetScalarType<T[P], AggregateVisitor[P]>
  }




  export type VisitorGroupByArgs = {
    where?: VisitorWhereInput
    orderBy?: Enumerable<VisitorOrderByWithAggregationInput>
    by: VisitorScalarFieldEnum[]
    having?: VisitorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisitorCountAggregateInputType | true
    _avg?: VisitorAvgAggregateInputType
    _sum?: VisitorSumAggregateInputType
    _min?: VisitorMinAggregateInputType
    _max?: VisitorMaxAggregateInputType
  }


  export type VisitorGroupByOutputType = {
    id: string
    email_visitor: string
    password_visitor: string | null
    createdAt: Date
    shift: number
    _count: VisitorCountAggregateOutputType | null
    _avg: VisitorAvgAggregateOutputType | null
    _sum: VisitorSumAggregateOutputType | null
    _min: VisitorMinAggregateOutputType | null
    _max: VisitorMaxAggregateOutputType | null
  }

  type GetVisitorGroupByPayload<T extends VisitorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VisitorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisitorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisitorGroupByOutputType[P]>
            : GetScalarType<T[P], VisitorGroupByOutputType[P]>
        }
      >
    >


  export type VisitorSelect = {
    id?: boolean
    email_visitor?: boolean
    password_visitor?: boolean
    createdAt?: boolean
    shift?: boolean
    visitSched?: boolean | Visitor$visitSchedArgs
    _count?: boolean | VisitorCountOutputTypeArgs
  }


  export type VisitorInclude = {
    visitSched?: boolean | Visitor$visitSchedArgs
    _count?: boolean | VisitorCountOutputTypeArgs
  }

  export type VisitorGetPayload<S extends boolean | null | undefined | VisitorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Visitor :
    S extends undefined ? never :
    S extends { include: any } & (VisitorArgs | VisitorFindManyArgs)
    ? Visitor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'visitSched' ? Array < VisitSchedGetPayload<S['include'][P]>>  :
        P extends '_count' ? VisitorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (VisitorArgs | VisitorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'visitSched' ? Array < VisitSchedGetPayload<S['select'][P]>>  :
        P extends '_count' ? VisitorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Visitor ? Visitor[P] : never
  } 
      : Visitor


  type VisitorCountArgs = 
    Omit<VisitorFindManyArgs, 'select' | 'include'> & {
      select?: VisitorCountAggregateInputType | true
    }

  export interface VisitorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Visitor that matches the filter.
     * @param {VisitorFindUniqueArgs} args - Arguments to find a Visitor
     * @example
     * // Get one Visitor
     * const visitor = await prisma.visitor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VisitorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VisitorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Visitor'> extends True ? Prisma__VisitorClient<VisitorGetPayload<T>> : Prisma__VisitorClient<VisitorGetPayload<T> | null, null>

    /**
     * Find one Visitor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VisitorFindUniqueOrThrowArgs} args - Arguments to find a Visitor
     * @example
     * // Get one Visitor
     * const visitor = await prisma.visitor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VisitorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VisitorFindUniqueOrThrowArgs>
    ): Prisma__VisitorClient<VisitorGetPayload<T>>

    /**
     * Find the first Visitor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorFindFirstArgs} args - Arguments to find a Visitor
     * @example
     * // Get one Visitor
     * const visitor = await prisma.visitor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VisitorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VisitorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Visitor'> extends True ? Prisma__VisitorClient<VisitorGetPayload<T>> : Prisma__VisitorClient<VisitorGetPayload<T> | null, null>

    /**
     * Find the first Visitor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorFindFirstOrThrowArgs} args - Arguments to find a Visitor
     * @example
     * // Get one Visitor
     * const visitor = await prisma.visitor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VisitorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VisitorFindFirstOrThrowArgs>
    ): Prisma__VisitorClient<VisitorGetPayload<T>>

    /**
     * Find zero or more Visitors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Visitors
     * const visitors = await prisma.visitor.findMany()
     * 
     * // Get first 10 Visitors
     * const visitors = await prisma.visitor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visitorWithIdOnly = await prisma.visitor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VisitorFindManyArgs>(
      args?: SelectSubset<T, VisitorFindManyArgs>
    ): Prisma.PrismaPromise<Array<VisitorGetPayload<T>>>

    /**
     * Create a Visitor.
     * @param {VisitorCreateArgs} args - Arguments to create a Visitor.
     * @example
     * // Create one Visitor
     * const Visitor = await prisma.visitor.create({
     *   data: {
     *     // ... data to create a Visitor
     *   }
     * })
     * 
    **/
    create<T extends VisitorCreateArgs>(
      args: SelectSubset<T, VisitorCreateArgs>
    ): Prisma__VisitorClient<VisitorGetPayload<T>>

    /**
     * Create many Visitors.
     *     @param {VisitorCreateManyArgs} args - Arguments to create many Visitors.
     *     @example
     *     // Create many Visitors
     *     const visitor = await prisma.visitor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VisitorCreateManyArgs>(
      args?: SelectSubset<T, VisitorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Visitor.
     * @param {VisitorDeleteArgs} args - Arguments to delete one Visitor.
     * @example
     * // Delete one Visitor
     * const Visitor = await prisma.visitor.delete({
     *   where: {
     *     // ... filter to delete one Visitor
     *   }
     * })
     * 
    **/
    delete<T extends VisitorDeleteArgs>(
      args: SelectSubset<T, VisitorDeleteArgs>
    ): Prisma__VisitorClient<VisitorGetPayload<T>>

    /**
     * Update one Visitor.
     * @param {VisitorUpdateArgs} args - Arguments to update one Visitor.
     * @example
     * // Update one Visitor
     * const visitor = await prisma.visitor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VisitorUpdateArgs>(
      args: SelectSubset<T, VisitorUpdateArgs>
    ): Prisma__VisitorClient<VisitorGetPayload<T>>

    /**
     * Delete zero or more Visitors.
     * @param {VisitorDeleteManyArgs} args - Arguments to filter Visitors to delete.
     * @example
     * // Delete a few Visitors
     * const { count } = await prisma.visitor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VisitorDeleteManyArgs>(
      args?: SelectSubset<T, VisitorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Visitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Visitors
     * const visitor = await prisma.visitor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VisitorUpdateManyArgs>(
      args: SelectSubset<T, VisitorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Visitor.
     * @param {VisitorUpsertArgs} args - Arguments to update or create a Visitor.
     * @example
     * // Update or create a Visitor
     * const visitor = await prisma.visitor.upsert({
     *   create: {
     *     // ... data to create a Visitor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Visitor we want to update
     *   }
     * })
    **/
    upsert<T extends VisitorUpsertArgs>(
      args: SelectSubset<T, VisitorUpsertArgs>
    ): Prisma__VisitorClient<VisitorGetPayload<T>>

    /**
     * Find zero or more Visitors that matches the filter.
     * @param {VisitorFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const visitor = await prisma.visitor.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: VisitorFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Visitor.
     * @param {VisitorAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const visitor = await prisma.visitor.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: VisitorAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Visitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorCountArgs} args - Arguments to filter Visitors to count.
     * @example
     * // Count the number of Visitors
     * const count = await prisma.visitor.count({
     *   where: {
     *     // ... the filter for the Visitors we want to count
     *   }
     * })
    **/
    count<T extends VisitorCountArgs>(
      args?: Subset<T, VisitorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisitorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Visitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisitorAggregateArgs>(args: Subset<T, VisitorAggregateArgs>): Prisma.PrismaPromise<GetVisitorAggregateType<T>>

    /**
     * Group by Visitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VisitorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VisitorGroupByArgs['orderBy'] }
        : { orderBy?: VisitorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VisitorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisitorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Visitor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VisitorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    visitSched<T extends Visitor$visitSchedArgs= {}>(args?: Subset<T, Visitor$visitSchedArgs>): Prisma.PrismaPromise<Array<VisitSchedGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Visitor base type for findUnique actions
   */
  export type VisitorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitorInclude | null
    /**
     * Filter, which Visitor to fetch.
     */
    where: VisitorWhereUniqueInput
  }

  /**
   * Visitor findUnique
   */
  export interface VisitorFindUniqueArgs extends VisitorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Visitor findUniqueOrThrow
   */
  export type VisitorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitorInclude | null
    /**
     * Filter, which Visitor to fetch.
     */
    where: VisitorWhereUniqueInput
  }


  /**
   * Visitor base type for findFirst actions
   */
  export type VisitorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitorInclude | null
    /**
     * Filter, which Visitor to fetch.
     */
    where?: VisitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitors to fetch.
     */
    orderBy?: Enumerable<VisitorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Visitors.
     */
    cursor?: VisitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Visitors.
     */
    distinct?: Enumerable<VisitorScalarFieldEnum>
  }

  /**
   * Visitor findFirst
   */
  export interface VisitorFindFirstArgs extends VisitorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Visitor findFirstOrThrow
   */
  export type VisitorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitorInclude | null
    /**
     * Filter, which Visitor to fetch.
     */
    where?: VisitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitors to fetch.
     */
    orderBy?: Enumerable<VisitorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Visitors.
     */
    cursor?: VisitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Visitors.
     */
    distinct?: Enumerable<VisitorScalarFieldEnum>
  }


  /**
   * Visitor findMany
   */
  export type VisitorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitorInclude | null
    /**
     * Filter, which Visitors to fetch.
     */
    where?: VisitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitors to fetch.
     */
    orderBy?: Enumerable<VisitorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Visitors.
     */
    cursor?: VisitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitors.
     */
    skip?: number
    distinct?: Enumerable<VisitorScalarFieldEnum>
  }


  /**
   * Visitor create
   */
  export type VisitorCreateArgs = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitorInclude | null
    /**
     * The data needed to create a Visitor.
     */
    data: XOR<VisitorCreateInput, VisitorUncheckedCreateInput>
  }


  /**
   * Visitor createMany
   */
  export type VisitorCreateManyArgs = {
    /**
     * The data used to create many Visitors.
     */
    data: Enumerable<VisitorCreateManyInput>
  }


  /**
   * Visitor update
   */
  export type VisitorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitorInclude | null
    /**
     * The data needed to update a Visitor.
     */
    data: XOR<VisitorUpdateInput, VisitorUncheckedUpdateInput>
    /**
     * Choose, which Visitor to update.
     */
    where: VisitorWhereUniqueInput
  }


  /**
   * Visitor updateMany
   */
  export type VisitorUpdateManyArgs = {
    /**
     * The data used to update Visitors.
     */
    data: XOR<VisitorUpdateManyMutationInput, VisitorUncheckedUpdateManyInput>
    /**
     * Filter which Visitors to update
     */
    where?: VisitorWhereInput
  }


  /**
   * Visitor upsert
   */
  export type VisitorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitorInclude | null
    /**
     * The filter to search for the Visitor to update in case it exists.
     */
    where: VisitorWhereUniqueInput
    /**
     * In case the Visitor found by the `where` argument doesn't exist, create a new Visitor with this data.
     */
    create: XOR<VisitorCreateInput, VisitorUncheckedCreateInput>
    /**
     * In case the Visitor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VisitorUpdateInput, VisitorUncheckedUpdateInput>
  }


  /**
   * Visitor delete
   */
  export type VisitorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitorInclude | null
    /**
     * Filter which Visitor to delete.
     */
    where: VisitorWhereUniqueInput
  }


  /**
   * Visitor deleteMany
   */
  export type VisitorDeleteManyArgs = {
    /**
     * Filter which Visitors to delete
     */
    where?: VisitorWhereInput
  }


  /**
   * Visitor findRaw
   */
  export type VisitorFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Visitor aggregateRaw
   */
  export type VisitorAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Visitor.visitSched
   */
  export type Visitor$visitSchedArgs = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
    where?: VisitSchedWhereInput
    orderBy?: Enumerable<VisitSchedOrderByWithRelationInput>
    cursor?: VisitSchedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VisitSchedScalarFieldEnum>
  }


  /**
   * Visitor without action
   */
  export type VisitorArgs = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitorInclude | null
  }



  /**
   * Model InmateRecord
   */


  export type AggregateInmateRecord = {
    _count: InmateRecordCountAggregateOutputType | null
    _min: InmateRecordMinAggregateOutputType | null
    _max: InmateRecordMaxAggregateOutputType | null
  }

  export type InmateRecordMinAggregateOutputType = {
    id: string | null
    inmateNo: string | null
    cellBlock: string | null
    lastname: string | null
    firstname: string | null
    middlename: string | null
    suffix: string | null
    perAdd: string | null
    gender: string | null
    bday: string | null
    civilstatus: string | null
    eyeColor: string | null
    crimeCom: string | null
    sentence: string | null
    dateStart: string | null
    dateEnd: string | null
    elastname: string | null
    efirstname: string | null
    emiddlename: string | null
    esuffix: string | null
    eperAdd: string | null
    relationship: string | null
    contact: string | null
  }

  export type InmateRecordMaxAggregateOutputType = {
    id: string | null
    inmateNo: string | null
    cellBlock: string | null
    lastname: string | null
    firstname: string | null
    middlename: string | null
    suffix: string | null
    perAdd: string | null
    gender: string | null
    bday: string | null
    civilstatus: string | null
    eyeColor: string | null
    crimeCom: string | null
    sentence: string | null
    dateStart: string | null
    dateEnd: string | null
    elastname: string | null
    efirstname: string | null
    emiddlename: string | null
    esuffix: string | null
    eperAdd: string | null
    relationship: string | null
    contact: string | null
  }

  export type InmateRecordCountAggregateOutputType = {
    id: number
    inmateNo: number
    cellBlock: number
    lastname: number
    firstname: number
    middlename: number
    suffix: number
    perAdd: number
    gender: number
    bday: number
    civilstatus: number
    eyeColor: number
    crimeCom: number
    sentence: number
    dateStart: number
    dateEnd: number
    elastname: number
    efirstname: number
    emiddlename: number
    esuffix: number
    eperAdd: number
    relationship: number
    contact: number
    _all: number
  }


  export type InmateRecordMinAggregateInputType = {
    id?: true
    inmateNo?: true
    cellBlock?: true
    lastname?: true
    firstname?: true
    middlename?: true
    suffix?: true
    perAdd?: true
    gender?: true
    bday?: true
    civilstatus?: true
    eyeColor?: true
    crimeCom?: true
    sentence?: true
    dateStart?: true
    dateEnd?: true
    elastname?: true
    efirstname?: true
    emiddlename?: true
    esuffix?: true
    eperAdd?: true
    relationship?: true
    contact?: true
  }

  export type InmateRecordMaxAggregateInputType = {
    id?: true
    inmateNo?: true
    cellBlock?: true
    lastname?: true
    firstname?: true
    middlename?: true
    suffix?: true
    perAdd?: true
    gender?: true
    bday?: true
    civilstatus?: true
    eyeColor?: true
    crimeCom?: true
    sentence?: true
    dateStart?: true
    dateEnd?: true
    elastname?: true
    efirstname?: true
    emiddlename?: true
    esuffix?: true
    eperAdd?: true
    relationship?: true
    contact?: true
  }

  export type InmateRecordCountAggregateInputType = {
    id?: true
    inmateNo?: true
    cellBlock?: true
    lastname?: true
    firstname?: true
    middlename?: true
    suffix?: true
    perAdd?: true
    gender?: true
    bday?: true
    civilstatus?: true
    eyeColor?: true
    crimeCom?: true
    sentence?: true
    dateStart?: true
    dateEnd?: true
    elastname?: true
    efirstname?: true
    emiddlename?: true
    esuffix?: true
    eperAdd?: true
    relationship?: true
    contact?: true
    _all?: true
  }

  export type InmateRecordAggregateArgs = {
    /**
     * Filter which InmateRecord to aggregate.
     */
    where?: InmateRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InmateRecords to fetch.
     */
    orderBy?: Enumerable<InmateRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InmateRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InmateRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InmateRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InmateRecords
    **/
    _count?: true | InmateRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InmateRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InmateRecordMaxAggregateInputType
  }

  export type GetInmateRecordAggregateType<T extends InmateRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateInmateRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInmateRecord[P]>
      : GetScalarType<T[P], AggregateInmateRecord[P]>
  }




  export type InmateRecordGroupByArgs = {
    where?: InmateRecordWhereInput
    orderBy?: Enumerable<InmateRecordOrderByWithAggregationInput>
    by: InmateRecordScalarFieldEnum[]
    having?: InmateRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InmateRecordCountAggregateInputType | true
    _min?: InmateRecordMinAggregateInputType
    _max?: InmateRecordMaxAggregateInputType
  }


  export type InmateRecordGroupByOutputType = {
    id: string
    inmateNo: string | null
    cellBlock: string | null
    lastname: string | null
    firstname: string | null
    middlename: string | null
    suffix: string | null
    perAdd: string | null
    gender: string | null
    bday: string | null
    civilstatus: string | null
    eyeColor: string | null
    crimeCom: string | null
    sentence: string | null
    dateStart: string | null
    dateEnd: string | null
    elastname: string | null
    efirstname: string | null
    emiddlename: string | null
    esuffix: string | null
    eperAdd: string | null
    relationship: string | null
    contact: string | null
    _count: InmateRecordCountAggregateOutputType | null
    _min: InmateRecordMinAggregateOutputType | null
    _max: InmateRecordMaxAggregateOutputType | null
  }

  type GetInmateRecordGroupByPayload<T extends InmateRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<InmateRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InmateRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InmateRecordGroupByOutputType[P]>
            : GetScalarType<T[P], InmateRecordGroupByOutputType[P]>
        }
      >
    >


  export type InmateRecordSelect = {
    id?: boolean
    inmateNo?: boolean
    cellBlock?: boolean
    lastname?: boolean
    firstname?: boolean
    middlename?: boolean
    suffix?: boolean
    perAdd?: boolean
    gender?: boolean
    bday?: boolean
    civilstatus?: boolean
    eyeColor?: boolean
    crimeCom?: boolean
    sentence?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    elastname?: boolean
    efirstname?: boolean
    emiddlename?: boolean
    esuffix?: boolean
    eperAdd?: boolean
    relationship?: boolean
    contact?: boolean
  }


  export type InmateRecordGetPayload<S extends boolean | null | undefined | InmateRecordArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? InmateRecord :
    S extends undefined ? never :
    S extends { include: any } & (InmateRecordArgs | InmateRecordFindManyArgs)
    ? InmateRecord 
    : S extends { select: any } & (InmateRecordArgs | InmateRecordFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof InmateRecord ? InmateRecord[P] : never
  } 
      : InmateRecord


  type InmateRecordCountArgs = 
    Omit<InmateRecordFindManyArgs, 'select' | 'include'> & {
      select?: InmateRecordCountAggregateInputType | true
    }

  export interface InmateRecordDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one InmateRecord that matches the filter.
     * @param {InmateRecordFindUniqueArgs} args - Arguments to find a InmateRecord
     * @example
     * // Get one InmateRecord
     * const inmateRecord = await prisma.inmateRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InmateRecordFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InmateRecordFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InmateRecord'> extends True ? Prisma__InmateRecordClient<InmateRecordGetPayload<T>> : Prisma__InmateRecordClient<InmateRecordGetPayload<T> | null, null>

    /**
     * Find one InmateRecord that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InmateRecordFindUniqueOrThrowArgs} args - Arguments to find a InmateRecord
     * @example
     * // Get one InmateRecord
     * const inmateRecord = await prisma.inmateRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InmateRecordFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, InmateRecordFindUniqueOrThrowArgs>
    ): Prisma__InmateRecordClient<InmateRecordGetPayload<T>>

    /**
     * Find the first InmateRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InmateRecordFindFirstArgs} args - Arguments to find a InmateRecord
     * @example
     * // Get one InmateRecord
     * const inmateRecord = await prisma.inmateRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InmateRecordFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InmateRecordFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InmateRecord'> extends True ? Prisma__InmateRecordClient<InmateRecordGetPayload<T>> : Prisma__InmateRecordClient<InmateRecordGetPayload<T> | null, null>

    /**
     * Find the first InmateRecord that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InmateRecordFindFirstOrThrowArgs} args - Arguments to find a InmateRecord
     * @example
     * // Get one InmateRecord
     * const inmateRecord = await prisma.inmateRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InmateRecordFindFirstOrThrowArgs>(
      args?: SelectSubset<T, InmateRecordFindFirstOrThrowArgs>
    ): Prisma__InmateRecordClient<InmateRecordGetPayload<T>>

    /**
     * Find zero or more InmateRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InmateRecordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InmateRecords
     * const inmateRecords = await prisma.inmateRecord.findMany()
     * 
     * // Get first 10 InmateRecords
     * const inmateRecords = await prisma.inmateRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inmateRecordWithIdOnly = await prisma.inmateRecord.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InmateRecordFindManyArgs>(
      args?: SelectSubset<T, InmateRecordFindManyArgs>
    ): Prisma.PrismaPromise<Array<InmateRecordGetPayload<T>>>

    /**
     * Create a InmateRecord.
     * @param {InmateRecordCreateArgs} args - Arguments to create a InmateRecord.
     * @example
     * // Create one InmateRecord
     * const InmateRecord = await prisma.inmateRecord.create({
     *   data: {
     *     // ... data to create a InmateRecord
     *   }
     * })
     * 
    **/
    create<T extends InmateRecordCreateArgs>(
      args: SelectSubset<T, InmateRecordCreateArgs>
    ): Prisma__InmateRecordClient<InmateRecordGetPayload<T>>

    /**
     * Create many InmateRecords.
     *     @param {InmateRecordCreateManyArgs} args - Arguments to create many InmateRecords.
     *     @example
     *     // Create many InmateRecords
     *     const inmateRecord = await prisma.inmateRecord.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InmateRecordCreateManyArgs>(
      args?: SelectSubset<T, InmateRecordCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InmateRecord.
     * @param {InmateRecordDeleteArgs} args - Arguments to delete one InmateRecord.
     * @example
     * // Delete one InmateRecord
     * const InmateRecord = await prisma.inmateRecord.delete({
     *   where: {
     *     // ... filter to delete one InmateRecord
     *   }
     * })
     * 
    **/
    delete<T extends InmateRecordDeleteArgs>(
      args: SelectSubset<T, InmateRecordDeleteArgs>
    ): Prisma__InmateRecordClient<InmateRecordGetPayload<T>>

    /**
     * Update one InmateRecord.
     * @param {InmateRecordUpdateArgs} args - Arguments to update one InmateRecord.
     * @example
     * // Update one InmateRecord
     * const inmateRecord = await prisma.inmateRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InmateRecordUpdateArgs>(
      args: SelectSubset<T, InmateRecordUpdateArgs>
    ): Prisma__InmateRecordClient<InmateRecordGetPayload<T>>

    /**
     * Delete zero or more InmateRecords.
     * @param {InmateRecordDeleteManyArgs} args - Arguments to filter InmateRecords to delete.
     * @example
     * // Delete a few InmateRecords
     * const { count } = await prisma.inmateRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InmateRecordDeleteManyArgs>(
      args?: SelectSubset<T, InmateRecordDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InmateRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InmateRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InmateRecords
     * const inmateRecord = await prisma.inmateRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InmateRecordUpdateManyArgs>(
      args: SelectSubset<T, InmateRecordUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InmateRecord.
     * @param {InmateRecordUpsertArgs} args - Arguments to update or create a InmateRecord.
     * @example
     * // Update or create a InmateRecord
     * const inmateRecord = await prisma.inmateRecord.upsert({
     *   create: {
     *     // ... data to create a InmateRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InmateRecord we want to update
     *   }
     * })
    **/
    upsert<T extends InmateRecordUpsertArgs>(
      args: SelectSubset<T, InmateRecordUpsertArgs>
    ): Prisma__InmateRecordClient<InmateRecordGetPayload<T>>

    /**
     * Find zero or more InmateRecords that matches the filter.
     * @param {InmateRecordFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const inmateRecord = await prisma.inmateRecord.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: InmateRecordFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a InmateRecord.
     * @param {InmateRecordAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const inmateRecord = await prisma.inmateRecord.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: InmateRecordAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of InmateRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InmateRecordCountArgs} args - Arguments to filter InmateRecords to count.
     * @example
     * // Count the number of InmateRecords
     * const count = await prisma.inmateRecord.count({
     *   where: {
     *     // ... the filter for the InmateRecords we want to count
     *   }
     * })
    **/
    count<T extends InmateRecordCountArgs>(
      args?: Subset<T, InmateRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InmateRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InmateRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InmateRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InmateRecordAggregateArgs>(args: Subset<T, InmateRecordAggregateArgs>): Prisma.PrismaPromise<GetInmateRecordAggregateType<T>>

    /**
     * Group by InmateRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InmateRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InmateRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InmateRecordGroupByArgs['orderBy'] }
        : { orderBy?: InmateRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InmateRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInmateRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for InmateRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InmateRecordClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * InmateRecord base type for findUnique actions
   */
  export type InmateRecordFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the InmateRecord
     */
    select?: InmateRecordSelect | null
    /**
     * Filter, which InmateRecord to fetch.
     */
    where: InmateRecordWhereUniqueInput
  }

  /**
   * InmateRecord findUnique
   */
  export interface InmateRecordFindUniqueArgs extends InmateRecordFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * InmateRecord findUniqueOrThrow
   */
  export type InmateRecordFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the InmateRecord
     */
    select?: InmateRecordSelect | null
    /**
     * Filter, which InmateRecord to fetch.
     */
    where: InmateRecordWhereUniqueInput
  }


  /**
   * InmateRecord base type for findFirst actions
   */
  export type InmateRecordFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the InmateRecord
     */
    select?: InmateRecordSelect | null
    /**
     * Filter, which InmateRecord to fetch.
     */
    where?: InmateRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InmateRecords to fetch.
     */
    orderBy?: Enumerable<InmateRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InmateRecords.
     */
    cursor?: InmateRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InmateRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InmateRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InmateRecords.
     */
    distinct?: Enumerable<InmateRecordScalarFieldEnum>
  }

  /**
   * InmateRecord findFirst
   */
  export interface InmateRecordFindFirstArgs extends InmateRecordFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * InmateRecord findFirstOrThrow
   */
  export type InmateRecordFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the InmateRecord
     */
    select?: InmateRecordSelect | null
    /**
     * Filter, which InmateRecord to fetch.
     */
    where?: InmateRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InmateRecords to fetch.
     */
    orderBy?: Enumerable<InmateRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InmateRecords.
     */
    cursor?: InmateRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InmateRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InmateRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InmateRecords.
     */
    distinct?: Enumerable<InmateRecordScalarFieldEnum>
  }


  /**
   * InmateRecord findMany
   */
  export type InmateRecordFindManyArgs = {
    /**
     * Select specific fields to fetch from the InmateRecord
     */
    select?: InmateRecordSelect | null
    /**
     * Filter, which InmateRecords to fetch.
     */
    where?: InmateRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InmateRecords to fetch.
     */
    orderBy?: Enumerable<InmateRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InmateRecords.
     */
    cursor?: InmateRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InmateRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InmateRecords.
     */
    skip?: number
    distinct?: Enumerable<InmateRecordScalarFieldEnum>
  }


  /**
   * InmateRecord create
   */
  export type InmateRecordCreateArgs = {
    /**
     * Select specific fields to fetch from the InmateRecord
     */
    select?: InmateRecordSelect | null
    /**
     * The data needed to create a InmateRecord.
     */
    data: XOR<InmateRecordCreateInput, InmateRecordUncheckedCreateInput>
  }


  /**
   * InmateRecord createMany
   */
  export type InmateRecordCreateManyArgs = {
    /**
     * The data used to create many InmateRecords.
     */
    data: Enumerable<InmateRecordCreateManyInput>
  }


  /**
   * InmateRecord update
   */
  export type InmateRecordUpdateArgs = {
    /**
     * Select specific fields to fetch from the InmateRecord
     */
    select?: InmateRecordSelect | null
    /**
     * The data needed to update a InmateRecord.
     */
    data: XOR<InmateRecordUpdateInput, InmateRecordUncheckedUpdateInput>
    /**
     * Choose, which InmateRecord to update.
     */
    where: InmateRecordWhereUniqueInput
  }


  /**
   * InmateRecord updateMany
   */
  export type InmateRecordUpdateManyArgs = {
    /**
     * The data used to update InmateRecords.
     */
    data: XOR<InmateRecordUpdateManyMutationInput, InmateRecordUncheckedUpdateManyInput>
    /**
     * Filter which InmateRecords to update
     */
    where?: InmateRecordWhereInput
  }


  /**
   * InmateRecord upsert
   */
  export type InmateRecordUpsertArgs = {
    /**
     * Select specific fields to fetch from the InmateRecord
     */
    select?: InmateRecordSelect | null
    /**
     * The filter to search for the InmateRecord to update in case it exists.
     */
    where: InmateRecordWhereUniqueInput
    /**
     * In case the InmateRecord found by the `where` argument doesn't exist, create a new InmateRecord with this data.
     */
    create: XOR<InmateRecordCreateInput, InmateRecordUncheckedCreateInput>
    /**
     * In case the InmateRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InmateRecordUpdateInput, InmateRecordUncheckedUpdateInput>
  }


  /**
   * InmateRecord delete
   */
  export type InmateRecordDeleteArgs = {
    /**
     * Select specific fields to fetch from the InmateRecord
     */
    select?: InmateRecordSelect | null
    /**
     * Filter which InmateRecord to delete.
     */
    where: InmateRecordWhereUniqueInput
  }


  /**
   * InmateRecord deleteMany
   */
  export type InmateRecordDeleteManyArgs = {
    /**
     * Filter which InmateRecords to delete
     */
    where?: InmateRecordWhereInput
  }


  /**
   * InmateRecord findRaw
   */
  export type InmateRecordFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * InmateRecord aggregateRaw
   */
  export type InmateRecordAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * InmateRecord without action
   */
  export type InmateRecordArgs = {
    /**
     * Select specific fields to fetch from the InmateRecord
     */
    select?: InmateRecordSelect | null
  }



  /**
   * Model VisitSched
   */


  export type AggregateVisitSched = {
    _count: VisitSchedCountAggregateOutputType | null
    _min: VisitSchedMinAggregateOutputType | null
    _max: VisitSchedMaxAggregateOutputType | null
  }

  export type VisitSchedMinAggregateOutputType = {
    id: string | null
    visitorId: string | null
    inmateNo: string | null
    cellBlock: string | null
    lastname: string | null
    firstname: string | null
    middlename: string | null
    suffix: string | null
    gender: string | null
    bday: string | null
    vlastname: string | null
    vfirstname: string | null
    vmiddlename: string | null
    vsuffix: string | null
    vperAdd: string | null
    timeVisit: string | null
    dateVisit: string | null
    relationship: string | null
    contact: string | null
  }

  export type VisitSchedMaxAggregateOutputType = {
    id: string | null
    visitorId: string | null
    inmateNo: string | null
    cellBlock: string | null
    lastname: string | null
    firstname: string | null
    middlename: string | null
    suffix: string | null
    gender: string | null
    bday: string | null
    vlastname: string | null
    vfirstname: string | null
    vmiddlename: string | null
    vsuffix: string | null
    vperAdd: string | null
    timeVisit: string | null
    dateVisit: string | null
    relationship: string | null
    contact: string | null
  }

  export type VisitSchedCountAggregateOutputType = {
    id: number
    visitorId: number
    inmateNo: number
    cellBlock: number
    lastname: number
    firstname: number
    middlename: number
    suffix: number
    gender: number
    bday: number
    vlastname: number
    vfirstname: number
    vmiddlename: number
    vsuffix: number
    vperAdd: number
    timeVisit: number
    dateVisit: number
    relationship: number
    contact: number
    _all: number
  }


  export type VisitSchedMinAggregateInputType = {
    id?: true
    visitorId?: true
    inmateNo?: true
    cellBlock?: true
    lastname?: true
    firstname?: true
    middlename?: true
    suffix?: true
    gender?: true
    bday?: true
    vlastname?: true
    vfirstname?: true
    vmiddlename?: true
    vsuffix?: true
    vperAdd?: true
    timeVisit?: true
    dateVisit?: true
    relationship?: true
    contact?: true
  }

  export type VisitSchedMaxAggregateInputType = {
    id?: true
    visitorId?: true
    inmateNo?: true
    cellBlock?: true
    lastname?: true
    firstname?: true
    middlename?: true
    suffix?: true
    gender?: true
    bday?: true
    vlastname?: true
    vfirstname?: true
    vmiddlename?: true
    vsuffix?: true
    vperAdd?: true
    timeVisit?: true
    dateVisit?: true
    relationship?: true
    contact?: true
  }

  export type VisitSchedCountAggregateInputType = {
    id?: true
    visitorId?: true
    inmateNo?: true
    cellBlock?: true
    lastname?: true
    firstname?: true
    middlename?: true
    suffix?: true
    gender?: true
    bday?: true
    vlastname?: true
    vfirstname?: true
    vmiddlename?: true
    vsuffix?: true
    vperAdd?: true
    timeVisit?: true
    dateVisit?: true
    relationship?: true
    contact?: true
    _all?: true
  }

  export type VisitSchedAggregateArgs = {
    /**
     * Filter which VisitSched to aggregate.
     */
    where?: VisitSchedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisitScheds to fetch.
     */
    orderBy?: Enumerable<VisitSchedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VisitSchedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisitScheds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisitScheds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VisitScheds
    **/
    _count?: true | VisitSchedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisitSchedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisitSchedMaxAggregateInputType
  }

  export type GetVisitSchedAggregateType<T extends VisitSchedAggregateArgs> = {
        [P in keyof T & keyof AggregateVisitSched]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisitSched[P]>
      : GetScalarType<T[P], AggregateVisitSched[P]>
  }




  export type VisitSchedGroupByArgs = {
    where?: VisitSchedWhereInput
    orderBy?: Enumerable<VisitSchedOrderByWithAggregationInput>
    by: VisitSchedScalarFieldEnum[]
    having?: VisitSchedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisitSchedCountAggregateInputType | true
    _min?: VisitSchedMinAggregateInputType
    _max?: VisitSchedMaxAggregateInputType
  }


  export type VisitSchedGroupByOutputType = {
    id: string
    visitorId: string
    inmateNo: string | null
    cellBlock: string | null
    lastname: string | null
    firstname: string | null
    middlename: string | null
    suffix: string | null
    gender: string | null
    bday: string | null
    vlastname: string | null
    vfirstname: string | null
    vmiddlename: string | null
    vsuffix: string | null
    vperAdd: string | null
    timeVisit: string | null
    dateVisit: string | null
    relationship: string | null
    contact: string | null
    _count: VisitSchedCountAggregateOutputType | null
    _min: VisitSchedMinAggregateOutputType | null
    _max: VisitSchedMaxAggregateOutputType | null
  }

  type GetVisitSchedGroupByPayload<T extends VisitSchedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VisitSchedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisitSchedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisitSchedGroupByOutputType[P]>
            : GetScalarType<T[P], VisitSchedGroupByOutputType[P]>
        }
      >
    >


  export type VisitSchedSelect = {
    id?: boolean
    visitorId?: boolean
    inmateNo?: boolean
    cellBlock?: boolean
    lastname?: boolean
    firstname?: boolean
    middlename?: boolean
    suffix?: boolean
    gender?: boolean
    bday?: boolean
    vlastname?: boolean
    vfirstname?: boolean
    vmiddlename?: boolean
    vsuffix?: boolean
    vperAdd?: boolean
    timeVisit?: boolean
    dateVisit?: boolean
    relationship?: boolean
    contact?: boolean
    visitor?: boolean | VisitorArgs
  }


  export type VisitSchedInclude = {
    visitor?: boolean | VisitorArgs
  }

  export type VisitSchedGetPayload<S extends boolean | null | undefined | VisitSchedArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? VisitSched :
    S extends undefined ? never :
    S extends { include: any } & (VisitSchedArgs | VisitSchedFindManyArgs)
    ? VisitSched  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'visitor' ? VisitorGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (VisitSchedArgs | VisitSchedFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'visitor' ? VisitorGetPayload<S['select'][P]> :  P extends keyof VisitSched ? VisitSched[P] : never
  } 
      : VisitSched


  type VisitSchedCountArgs = 
    Omit<VisitSchedFindManyArgs, 'select' | 'include'> & {
      select?: VisitSchedCountAggregateInputType | true
    }

  export interface VisitSchedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one VisitSched that matches the filter.
     * @param {VisitSchedFindUniqueArgs} args - Arguments to find a VisitSched
     * @example
     * // Get one VisitSched
     * const visitSched = await prisma.visitSched.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VisitSchedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VisitSchedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VisitSched'> extends True ? Prisma__VisitSchedClient<VisitSchedGetPayload<T>> : Prisma__VisitSchedClient<VisitSchedGetPayload<T> | null, null>

    /**
     * Find one VisitSched that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VisitSchedFindUniqueOrThrowArgs} args - Arguments to find a VisitSched
     * @example
     * // Get one VisitSched
     * const visitSched = await prisma.visitSched.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VisitSchedFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VisitSchedFindUniqueOrThrowArgs>
    ): Prisma__VisitSchedClient<VisitSchedGetPayload<T>>

    /**
     * Find the first VisitSched that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitSchedFindFirstArgs} args - Arguments to find a VisitSched
     * @example
     * // Get one VisitSched
     * const visitSched = await prisma.visitSched.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VisitSchedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VisitSchedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VisitSched'> extends True ? Prisma__VisitSchedClient<VisitSchedGetPayload<T>> : Prisma__VisitSchedClient<VisitSchedGetPayload<T> | null, null>

    /**
     * Find the first VisitSched that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitSchedFindFirstOrThrowArgs} args - Arguments to find a VisitSched
     * @example
     * // Get one VisitSched
     * const visitSched = await prisma.visitSched.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VisitSchedFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VisitSchedFindFirstOrThrowArgs>
    ): Prisma__VisitSchedClient<VisitSchedGetPayload<T>>

    /**
     * Find zero or more VisitScheds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitSchedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VisitScheds
     * const visitScheds = await prisma.visitSched.findMany()
     * 
     * // Get first 10 VisitScheds
     * const visitScheds = await prisma.visitSched.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visitSchedWithIdOnly = await prisma.visitSched.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VisitSchedFindManyArgs>(
      args?: SelectSubset<T, VisitSchedFindManyArgs>
    ): Prisma.PrismaPromise<Array<VisitSchedGetPayload<T>>>

    /**
     * Create a VisitSched.
     * @param {VisitSchedCreateArgs} args - Arguments to create a VisitSched.
     * @example
     * // Create one VisitSched
     * const VisitSched = await prisma.visitSched.create({
     *   data: {
     *     // ... data to create a VisitSched
     *   }
     * })
     * 
    **/
    create<T extends VisitSchedCreateArgs>(
      args: SelectSubset<T, VisitSchedCreateArgs>
    ): Prisma__VisitSchedClient<VisitSchedGetPayload<T>>

    /**
     * Create many VisitScheds.
     *     @param {VisitSchedCreateManyArgs} args - Arguments to create many VisitScheds.
     *     @example
     *     // Create many VisitScheds
     *     const visitSched = await prisma.visitSched.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VisitSchedCreateManyArgs>(
      args?: SelectSubset<T, VisitSchedCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VisitSched.
     * @param {VisitSchedDeleteArgs} args - Arguments to delete one VisitSched.
     * @example
     * // Delete one VisitSched
     * const VisitSched = await prisma.visitSched.delete({
     *   where: {
     *     // ... filter to delete one VisitSched
     *   }
     * })
     * 
    **/
    delete<T extends VisitSchedDeleteArgs>(
      args: SelectSubset<T, VisitSchedDeleteArgs>
    ): Prisma__VisitSchedClient<VisitSchedGetPayload<T>>

    /**
     * Update one VisitSched.
     * @param {VisitSchedUpdateArgs} args - Arguments to update one VisitSched.
     * @example
     * // Update one VisitSched
     * const visitSched = await prisma.visitSched.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VisitSchedUpdateArgs>(
      args: SelectSubset<T, VisitSchedUpdateArgs>
    ): Prisma__VisitSchedClient<VisitSchedGetPayload<T>>

    /**
     * Delete zero or more VisitScheds.
     * @param {VisitSchedDeleteManyArgs} args - Arguments to filter VisitScheds to delete.
     * @example
     * // Delete a few VisitScheds
     * const { count } = await prisma.visitSched.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VisitSchedDeleteManyArgs>(
      args?: SelectSubset<T, VisitSchedDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VisitScheds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitSchedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VisitScheds
     * const visitSched = await prisma.visitSched.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VisitSchedUpdateManyArgs>(
      args: SelectSubset<T, VisitSchedUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VisitSched.
     * @param {VisitSchedUpsertArgs} args - Arguments to update or create a VisitSched.
     * @example
     * // Update or create a VisitSched
     * const visitSched = await prisma.visitSched.upsert({
     *   create: {
     *     // ... data to create a VisitSched
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VisitSched we want to update
     *   }
     * })
    **/
    upsert<T extends VisitSchedUpsertArgs>(
      args: SelectSubset<T, VisitSchedUpsertArgs>
    ): Prisma__VisitSchedClient<VisitSchedGetPayload<T>>

    /**
     * Find zero or more VisitScheds that matches the filter.
     * @param {VisitSchedFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const visitSched = await prisma.visitSched.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: VisitSchedFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a VisitSched.
     * @param {VisitSchedAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const visitSched = await prisma.visitSched.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: VisitSchedAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of VisitScheds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitSchedCountArgs} args - Arguments to filter VisitScheds to count.
     * @example
     * // Count the number of VisitScheds
     * const count = await prisma.visitSched.count({
     *   where: {
     *     // ... the filter for the VisitScheds we want to count
     *   }
     * })
    **/
    count<T extends VisitSchedCountArgs>(
      args?: Subset<T, VisitSchedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisitSchedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VisitSched.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitSchedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisitSchedAggregateArgs>(args: Subset<T, VisitSchedAggregateArgs>): Prisma.PrismaPromise<GetVisitSchedAggregateType<T>>

    /**
     * Group by VisitSched.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitSchedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VisitSchedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VisitSchedGroupByArgs['orderBy'] }
        : { orderBy?: VisitSchedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VisitSchedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisitSchedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for VisitSched.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VisitSchedClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    visitor<T extends VisitorArgs= {}>(args?: Subset<T, VisitorArgs>): Prisma__VisitorClient<VisitorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * VisitSched base type for findUnique actions
   */
  export type VisitSchedFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
    /**
     * Filter, which VisitSched to fetch.
     */
    where: VisitSchedWhereUniqueInput
  }

  /**
   * VisitSched findUnique
   */
  export interface VisitSchedFindUniqueArgs extends VisitSchedFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VisitSched findUniqueOrThrow
   */
  export type VisitSchedFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
    /**
     * Filter, which VisitSched to fetch.
     */
    where: VisitSchedWhereUniqueInput
  }


  /**
   * VisitSched base type for findFirst actions
   */
  export type VisitSchedFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
    /**
     * Filter, which VisitSched to fetch.
     */
    where?: VisitSchedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisitScheds to fetch.
     */
    orderBy?: Enumerable<VisitSchedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisitScheds.
     */
    cursor?: VisitSchedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisitScheds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisitScheds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisitScheds.
     */
    distinct?: Enumerable<VisitSchedScalarFieldEnum>
  }

  /**
   * VisitSched findFirst
   */
  export interface VisitSchedFindFirstArgs extends VisitSchedFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VisitSched findFirstOrThrow
   */
  export type VisitSchedFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
    /**
     * Filter, which VisitSched to fetch.
     */
    where?: VisitSchedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisitScheds to fetch.
     */
    orderBy?: Enumerable<VisitSchedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisitScheds.
     */
    cursor?: VisitSchedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisitScheds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisitScheds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisitScheds.
     */
    distinct?: Enumerable<VisitSchedScalarFieldEnum>
  }


  /**
   * VisitSched findMany
   */
  export type VisitSchedFindManyArgs = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
    /**
     * Filter, which VisitScheds to fetch.
     */
    where?: VisitSchedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisitScheds to fetch.
     */
    orderBy?: Enumerable<VisitSchedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VisitScheds.
     */
    cursor?: VisitSchedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisitScheds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisitScheds.
     */
    skip?: number
    distinct?: Enumerable<VisitSchedScalarFieldEnum>
  }


  /**
   * VisitSched create
   */
  export type VisitSchedCreateArgs = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
    /**
     * The data needed to create a VisitSched.
     */
    data: XOR<VisitSchedCreateInput, VisitSchedUncheckedCreateInput>
  }


  /**
   * VisitSched createMany
   */
  export type VisitSchedCreateManyArgs = {
    /**
     * The data used to create many VisitScheds.
     */
    data: Enumerable<VisitSchedCreateManyInput>
  }


  /**
   * VisitSched update
   */
  export type VisitSchedUpdateArgs = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
    /**
     * The data needed to update a VisitSched.
     */
    data: XOR<VisitSchedUpdateInput, VisitSchedUncheckedUpdateInput>
    /**
     * Choose, which VisitSched to update.
     */
    where: VisitSchedWhereUniqueInput
  }


  /**
   * VisitSched updateMany
   */
  export type VisitSchedUpdateManyArgs = {
    /**
     * The data used to update VisitScheds.
     */
    data: XOR<VisitSchedUpdateManyMutationInput, VisitSchedUncheckedUpdateManyInput>
    /**
     * Filter which VisitScheds to update
     */
    where?: VisitSchedWhereInput
  }


  /**
   * VisitSched upsert
   */
  export type VisitSchedUpsertArgs = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
    /**
     * The filter to search for the VisitSched to update in case it exists.
     */
    where: VisitSchedWhereUniqueInput
    /**
     * In case the VisitSched found by the `where` argument doesn't exist, create a new VisitSched with this data.
     */
    create: XOR<VisitSchedCreateInput, VisitSchedUncheckedCreateInput>
    /**
     * In case the VisitSched was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VisitSchedUpdateInput, VisitSchedUncheckedUpdateInput>
  }


  /**
   * VisitSched delete
   */
  export type VisitSchedDeleteArgs = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
    /**
     * Filter which VisitSched to delete.
     */
    where: VisitSchedWhereUniqueInput
  }


  /**
   * VisitSched deleteMany
   */
  export type VisitSchedDeleteManyArgs = {
    /**
     * Filter which VisitScheds to delete
     */
    where?: VisitSchedWhereInput
  }


  /**
   * VisitSched findRaw
   */
  export type VisitSchedFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * VisitSched aggregateRaw
   */
  export type VisitSchedAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * VisitSched without action
   */
  export type VisitSchedArgs = {
    /**
     * Select specific fields to fetch from the VisitSched
     */
    select?: VisitSchedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisitSchedInclude | null
  }



  /**
   * Enums
   */

  export const AdminScalarFieldEnum: {
    id: 'id',
    email_admin: 'email_admin',
    password_admin: 'password_admin',
    createdAt: 'createdAt',
    shift: 'shift'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const InmateRecordScalarFieldEnum: {
    id: 'id',
    inmateNo: 'inmateNo',
    cellBlock: 'cellBlock',
    lastname: 'lastname',
    firstname: 'firstname',
    middlename: 'middlename',
    suffix: 'suffix',
    perAdd: 'perAdd',
    gender: 'gender',
    bday: 'bday',
    civilstatus: 'civilstatus',
    eyeColor: 'eyeColor',
    crimeCom: 'crimeCom',
    sentence: 'sentence',
    dateStart: 'dateStart',
    dateEnd: 'dateEnd',
    elastname: 'elastname',
    efirstname: 'efirstname',
    emiddlename: 'emiddlename',
    esuffix: 'esuffix',
    eperAdd: 'eperAdd',
    relationship: 'relationship',
    contact: 'contact'
  };

  export type InmateRecordScalarFieldEnum = (typeof InmateRecordScalarFieldEnum)[keyof typeof InmateRecordScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const VisitSchedScalarFieldEnum: {
    id: 'id',
    visitorId: 'visitorId',
    inmateNo: 'inmateNo',
    cellBlock: 'cellBlock',
    lastname: 'lastname',
    firstname: 'firstname',
    middlename: 'middlename',
    suffix: 'suffix',
    gender: 'gender',
    bday: 'bday',
    vlastname: 'vlastname',
    vfirstname: 'vfirstname',
    vmiddlename: 'vmiddlename',
    vsuffix: 'vsuffix',
    vperAdd: 'vperAdd',
    timeVisit: 'timeVisit',
    dateVisit: 'dateVisit',
    relationship: 'relationship',
    contact: 'contact'
  };

  export type VisitSchedScalarFieldEnum = (typeof VisitSchedScalarFieldEnum)[keyof typeof VisitSchedScalarFieldEnum]


  export const VisitorScalarFieldEnum: {
    id: 'id',
    email_visitor: 'email_visitor',
    password_visitor: 'password_visitor',
    createdAt: 'createdAt',
    shift: 'shift'
  };

  export type VisitorScalarFieldEnum = (typeof VisitorScalarFieldEnum)[keyof typeof VisitorScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: Enumerable<AdminWhereInput>
    OR?: Enumerable<AdminWhereInput>
    NOT?: Enumerable<AdminWhereInput>
    id?: StringFilter | string
    email_admin?: StringFilter | string
    password_admin?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    shift?: IntFilter | number
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    email_admin?: SortOrder
    password_admin?: SortOrder
    createdAt?: SortOrder
    shift?: SortOrder
  }

  export type AdminWhereUniqueInput = {
    id?: string
    email_admin?: string
  }

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    email_admin?: SortOrder
    password_admin?: SortOrder
    createdAt?: SortOrder
    shift?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdminScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdminScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdminScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email_admin?: StringWithAggregatesFilter | string
    password_admin?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    shift?: IntWithAggregatesFilter | number
  }

  export type VisitorWhereInput = {
    AND?: Enumerable<VisitorWhereInput>
    OR?: Enumerable<VisitorWhereInput>
    NOT?: Enumerable<VisitorWhereInput>
    id?: StringFilter | string
    email_visitor?: StringFilter | string
    password_visitor?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    shift?: IntFilter | number
    visitSched?: VisitSchedListRelationFilter
  }

  export type VisitorOrderByWithRelationInput = {
    id?: SortOrder
    email_visitor?: SortOrder
    password_visitor?: SortOrder
    createdAt?: SortOrder
    shift?: SortOrder
    visitSched?: VisitSchedOrderByRelationAggregateInput
  }

  export type VisitorWhereUniqueInput = {
    id?: string
    email_visitor?: string
  }

  export type VisitorOrderByWithAggregationInput = {
    id?: SortOrder
    email_visitor?: SortOrder
    password_visitor?: SortOrder
    createdAt?: SortOrder
    shift?: SortOrder
    _count?: VisitorCountOrderByAggregateInput
    _avg?: VisitorAvgOrderByAggregateInput
    _max?: VisitorMaxOrderByAggregateInput
    _min?: VisitorMinOrderByAggregateInput
    _sum?: VisitorSumOrderByAggregateInput
  }

  export type VisitorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VisitorScalarWhereWithAggregatesInput>
    OR?: Enumerable<VisitorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VisitorScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email_visitor?: StringWithAggregatesFilter | string
    password_visitor?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    shift?: IntWithAggregatesFilter | number
  }

  export type InmateRecordWhereInput = {
    AND?: Enumerable<InmateRecordWhereInput>
    OR?: Enumerable<InmateRecordWhereInput>
    NOT?: Enumerable<InmateRecordWhereInput>
    id?: StringFilter | string
    inmateNo?: StringNullableFilter | string | null
    cellBlock?: StringNullableFilter | string | null
    lastname?: StringNullableFilter | string | null
    firstname?: StringNullableFilter | string | null
    middlename?: StringNullableFilter | string | null
    suffix?: StringNullableFilter | string | null
    perAdd?: StringNullableFilter | string | null
    gender?: StringNullableFilter | string | null
    bday?: StringNullableFilter | string | null
    civilstatus?: StringNullableFilter | string | null
    eyeColor?: StringNullableFilter | string | null
    crimeCom?: StringNullableFilter | string | null
    sentence?: StringNullableFilter | string | null
    dateStart?: StringNullableFilter | string | null
    dateEnd?: StringNullableFilter | string | null
    elastname?: StringNullableFilter | string | null
    efirstname?: StringNullableFilter | string | null
    emiddlename?: StringNullableFilter | string | null
    esuffix?: StringNullableFilter | string | null
    eperAdd?: StringNullableFilter | string | null
    relationship?: StringNullableFilter | string | null
    contact?: StringNullableFilter | string | null
  }

  export type InmateRecordOrderByWithRelationInput = {
    id?: SortOrder
    inmateNo?: SortOrder
    cellBlock?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    middlename?: SortOrder
    suffix?: SortOrder
    perAdd?: SortOrder
    gender?: SortOrder
    bday?: SortOrder
    civilstatus?: SortOrder
    eyeColor?: SortOrder
    crimeCom?: SortOrder
    sentence?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    elastname?: SortOrder
    efirstname?: SortOrder
    emiddlename?: SortOrder
    esuffix?: SortOrder
    eperAdd?: SortOrder
    relationship?: SortOrder
    contact?: SortOrder
  }

  export type InmateRecordWhereUniqueInput = {
    id?: string
  }

  export type InmateRecordOrderByWithAggregationInput = {
    id?: SortOrder
    inmateNo?: SortOrder
    cellBlock?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    middlename?: SortOrder
    suffix?: SortOrder
    perAdd?: SortOrder
    gender?: SortOrder
    bday?: SortOrder
    civilstatus?: SortOrder
    eyeColor?: SortOrder
    crimeCom?: SortOrder
    sentence?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    elastname?: SortOrder
    efirstname?: SortOrder
    emiddlename?: SortOrder
    esuffix?: SortOrder
    eperAdd?: SortOrder
    relationship?: SortOrder
    contact?: SortOrder
    _count?: InmateRecordCountOrderByAggregateInput
    _max?: InmateRecordMaxOrderByAggregateInput
    _min?: InmateRecordMinOrderByAggregateInput
  }

  export type InmateRecordScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InmateRecordScalarWhereWithAggregatesInput>
    OR?: Enumerable<InmateRecordScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InmateRecordScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    inmateNo?: StringNullableWithAggregatesFilter | string | null
    cellBlock?: StringNullableWithAggregatesFilter | string | null
    lastname?: StringNullableWithAggregatesFilter | string | null
    firstname?: StringNullableWithAggregatesFilter | string | null
    middlename?: StringNullableWithAggregatesFilter | string | null
    suffix?: StringNullableWithAggregatesFilter | string | null
    perAdd?: StringNullableWithAggregatesFilter | string | null
    gender?: StringNullableWithAggregatesFilter | string | null
    bday?: StringNullableWithAggregatesFilter | string | null
    civilstatus?: StringNullableWithAggregatesFilter | string | null
    eyeColor?: StringNullableWithAggregatesFilter | string | null
    crimeCom?: StringNullableWithAggregatesFilter | string | null
    sentence?: StringNullableWithAggregatesFilter | string | null
    dateStart?: StringNullableWithAggregatesFilter | string | null
    dateEnd?: StringNullableWithAggregatesFilter | string | null
    elastname?: StringNullableWithAggregatesFilter | string | null
    efirstname?: StringNullableWithAggregatesFilter | string | null
    emiddlename?: StringNullableWithAggregatesFilter | string | null
    esuffix?: StringNullableWithAggregatesFilter | string | null
    eperAdd?: StringNullableWithAggregatesFilter | string | null
    relationship?: StringNullableWithAggregatesFilter | string | null
    contact?: StringNullableWithAggregatesFilter | string | null
  }

  export type VisitSchedWhereInput = {
    AND?: Enumerable<VisitSchedWhereInput>
    OR?: Enumerable<VisitSchedWhereInput>
    NOT?: Enumerable<VisitSchedWhereInput>
    id?: StringFilter | string
    visitorId?: StringFilter | string
    inmateNo?: StringNullableFilter | string | null
    cellBlock?: StringNullableFilter | string | null
    lastname?: StringNullableFilter | string | null
    firstname?: StringNullableFilter | string | null
    middlename?: StringNullableFilter | string | null
    suffix?: StringNullableFilter | string | null
    gender?: StringNullableFilter | string | null
    bday?: StringNullableFilter | string | null
    vlastname?: StringNullableFilter | string | null
    vfirstname?: StringNullableFilter | string | null
    vmiddlename?: StringNullableFilter | string | null
    vsuffix?: StringNullableFilter | string | null
    vperAdd?: StringNullableFilter | string | null
    timeVisit?: StringNullableFilter | string | null
    dateVisit?: StringNullableFilter | string | null
    relationship?: StringNullableFilter | string | null
    contact?: StringNullableFilter | string | null
    visitor?: XOR<VisitorRelationFilter, VisitorWhereInput>
  }

  export type VisitSchedOrderByWithRelationInput = {
    id?: SortOrder
    visitorId?: SortOrder
    inmateNo?: SortOrder
    cellBlock?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    middlename?: SortOrder
    suffix?: SortOrder
    gender?: SortOrder
    bday?: SortOrder
    vlastname?: SortOrder
    vfirstname?: SortOrder
    vmiddlename?: SortOrder
    vsuffix?: SortOrder
    vperAdd?: SortOrder
    timeVisit?: SortOrder
    dateVisit?: SortOrder
    relationship?: SortOrder
    contact?: SortOrder
    visitor?: VisitorOrderByWithRelationInput
  }

  export type VisitSchedWhereUniqueInput = {
    id?: string
  }

  export type VisitSchedOrderByWithAggregationInput = {
    id?: SortOrder
    visitorId?: SortOrder
    inmateNo?: SortOrder
    cellBlock?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    middlename?: SortOrder
    suffix?: SortOrder
    gender?: SortOrder
    bday?: SortOrder
    vlastname?: SortOrder
    vfirstname?: SortOrder
    vmiddlename?: SortOrder
    vsuffix?: SortOrder
    vperAdd?: SortOrder
    timeVisit?: SortOrder
    dateVisit?: SortOrder
    relationship?: SortOrder
    contact?: SortOrder
    _count?: VisitSchedCountOrderByAggregateInput
    _max?: VisitSchedMaxOrderByAggregateInput
    _min?: VisitSchedMinOrderByAggregateInput
  }

  export type VisitSchedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VisitSchedScalarWhereWithAggregatesInput>
    OR?: Enumerable<VisitSchedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VisitSchedScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    visitorId?: StringWithAggregatesFilter | string
    inmateNo?: StringNullableWithAggregatesFilter | string | null
    cellBlock?: StringNullableWithAggregatesFilter | string | null
    lastname?: StringNullableWithAggregatesFilter | string | null
    firstname?: StringNullableWithAggregatesFilter | string | null
    middlename?: StringNullableWithAggregatesFilter | string | null
    suffix?: StringNullableWithAggregatesFilter | string | null
    gender?: StringNullableWithAggregatesFilter | string | null
    bday?: StringNullableWithAggregatesFilter | string | null
    vlastname?: StringNullableWithAggregatesFilter | string | null
    vfirstname?: StringNullableWithAggregatesFilter | string | null
    vmiddlename?: StringNullableWithAggregatesFilter | string | null
    vsuffix?: StringNullableWithAggregatesFilter | string | null
    vperAdd?: StringNullableWithAggregatesFilter | string | null
    timeVisit?: StringNullableWithAggregatesFilter | string | null
    dateVisit?: StringNullableWithAggregatesFilter | string | null
    relationship?: StringNullableWithAggregatesFilter | string | null
    contact?: StringNullableWithAggregatesFilter | string | null
  }

  export type AdminCreateInput = {
    id?: string
    email_admin: string
    password_admin?: string | null
    createdAt?: Date | string
    shift: number
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    email_admin: string
    password_admin?: string | null
    createdAt?: Date | string
    shift: number
  }

  export type AdminUpdateInput = {
    email_admin?: StringFieldUpdateOperationsInput | string
    password_admin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUncheckedUpdateInput = {
    email_admin?: StringFieldUpdateOperationsInput | string
    password_admin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateManyInput = {
    id?: string
    email_admin: string
    password_admin?: string | null
    createdAt?: Date | string
    shift: number
  }

  export type AdminUpdateManyMutationInput = {
    email_admin?: StringFieldUpdateOperationsInput | string
    password_admin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUncheckedUpdateManyInput = {
    email_admin?: StringFieldUpdateOperationsInput | string
    password_admin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: IntFieldUpdateOperationsInput | number
  }

  export type VisitorCreateInput = {
    id?: string
    email_visitor: string
    password_visitor?: string | null
    createdAt?: Date | string
    shift: number
    visitSched?: VisitSchedCreateNestedManyWithoutVisitorInput
  }

  export type VisitorUncheckedCreateInput = {
    id?: string
    email_visitor: string
    password_visitor?: string | null
    createdAt?: Date | string
    shift: number
    visitSched?: VisitSchedUncheckedCreateNestedManyWithoutVisitorInput
  }

  export type VisitorUpdateInput = {
    email_visitor?: StringFieldUpdateOperationsInput | string
    password_visitor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: IntFieldUpdateOperationsInput | number
    visitSched?: VisitSchedUpdateManyWithoutVisitorNestedInput
  }

  export type VisitorUncheckedUpdateInput = {
    email_visitor?: StringFieldUpdateOperationsInput | string
    password_visitor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: IntFieldUpdateOperationsInput | number
    visitSched?: VisitSchedUncheckedUpdateManyWithoutVisitorNestedInput
  }

  export type VisitorCreateManyInput = {
    id?: string
    email_visitor: string
    password_visitor?: string | null
    createdAt?: Date | string
    shift: number
  }

  export type VisitorUpdateManyMutationInput = {
    email_visitor?: StringFieldUpdateOperationsInput | string
    password_visitor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: IntFieldUpdateOperationsInput | number
  }

  export type VisitorUncheckedUpdateManyInput = {
    email_visitor?: StringFieldUpdateOperationsInput | string
    password_visitor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: IntFieldUpdateOperationsInput | number
  }

  export type InmateRecordCreateInput = {
    id?: string
    inmateNo?: string | null
    cellBlock?: string | null
    lastname?: string | null
    firstname?: string | null
    middlename?: string | null
    suffix?: string | null
    perAdd?: string | null
    gender?: string | null
    bday?: string | null
    civilstatus?: string | null
    eyeColor?: string | null
    crimeCom?: string | null
    sentence?: string | null
    dateStart?: string | null
    dateEnd?: string | null
    elastname?: string | null
    efirstname?: string | null
    emiddlename?: string | null
    esuffix?: string | null
    eperAdd?: string | null
    relationship?: string | null
    contact?: string | null
  }

  export type InmateRecordUncheckedCreateInput = {
    id?: string
    inmateNo?: string | null
    cellBlock?: string | null
    lastname?: string | null
    firstname?: string | null
    middlename?: string | null
    suffix?: string | null
    perAdd?: string | null
    gender?: string | null
    bday?: string | null
    civilstatus?: string | null
    eyeColor?: string | null
    crimeCom?: string | null
    sentence?: string | null
    dateStart?: string | null
    dateEnd?: string | null
    elastname?: string | null
    efirstname?: string | null
    emiddlename?: string | null
    esuffix?: string | null
    eperAdd?: string | null
    relationship?: string | null
    contact?: string | null
  }

  export type InmateRecordUpdateInput = {
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    perAdd?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    civilstatus?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    crimeCom?: NullableStringFieldUpdateOperationsInput | string | null
    sentence?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableStringFieldUpdateOperationsInput | string | null
    dateEnd?: NullableStringFieldUpdateOperationsInput | string | null
    elastname?: NullableStringFieldUpdateOperationsInput | string | null
    efirstname?: NullableStringFieldUpdateOperationsInput | string | null
    emiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    esuffix?: NullableStringFieldUpdateOperationsInput | string | null
    eperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InmateRecordUncheckedUpdateInput = {
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    perAdd?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    civilstatus?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    crimeCom?: NullableStringFieldUpdateOperationsInput | string | null
    sentence?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableStringFieldUpdateOperationsInput | string | null
    dateEnd?: NullableStringFieldUpdateOperationsInput | string | null
    elastname?: NullableStringFieldUpdateOperationsInput | string | null
    efirstname?: NullableStringFieldUpdateOperationsInput | string | null
    emiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    esuffix?: NullableStringFieldUpdateOperationsInput | string | null
    eperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InmateRecordCreateManyInput = {
    id?: string
    inmateNo?: string | null
    cellBlock?: string | null
    lastname?: string | null
    firstname?: string | null
    middlename?: string | null
    suffix?: string | null
    perAdd?: string | null
    gender?: string | null
    bday?: string | null
    civilstatus?: string | null
    eyeColor?: string | null
    crimeCom?: string | null
    sentence?: string | null
    dateStart?: string | null
    dateEnd?: string | null
    elastname?: string | null
    efirstname?: string | null
    emiddlename?: string | null
    esuffix?: string | null
    eperAdd?: string | null
    relationship?: string | null
    contact?: string | null
  }

  export type InmateRecordUpdateManyMutationInput = {
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    perAdd?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    civilstatus?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    crimeCom?: NullableStringFieldUpdateOperationsInput | string | null
    sentence?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableStringFieldUpdateOperationsInput | string | null
    dateEnd?: NullableStringFieldUpdateOperationsInput | string | null
    elastname?: NullableStringFieldUpdateOperationsInput | string | null
    efirstname?: NullableStringFieldUpdateOperationsInput | string | null
    emiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    esuffix?: NullableStringFieldUpdateOperationsInput | string | null
    eperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InmateRecordUncheckedUpdateManyInput = {
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    perAdd?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    civilstatus?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    crimeCom?: NullableStringFieldUpdateOperationsInput | string | null
    sentence?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableStringFieldUpdateOperationsInput | string | null
    dateEnd?: NullableStringFieldUpdateOperationsInput | string | null
    elastname?: NullableStringFieldUpdateOperationsInput | string | null
    efirstname?: NullableStringFieldUpdateOperationsInput | string | null
    emiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    esuffix?: NullableStringFieldUpdateOperationsInput | string | null
    eperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VisitSchedCreateInput = {
    id?: string
    inmateNo?: string | null
    cellBlock?: string | null
    lastname?: string | null
    firstname?: string | null
    middlename?: string | null
    suffix?: string | null
    gender?: string | null
    bday?: string | null
    vlastname?: string | null
    vfirstname?: string | null
    vmiddlename?: string | null
    vsuffix?: string | null
    vperAdd?: string | null
    timeVisit?: string | null
    dateVisit?: string | null
    relationship?: string | null
    contact?: string | null
    visitor: VisitorCreateNestedOneWithoutVisitSchedInput
  }

  export type VisitSchedUncheckedCreateInput = {
    id?: string
    visitorId: string
    inmateNo?: string | null
    cellBlock?: string | null
    lastname?: string | null
    firstname?: string | null
    middlename?: string | null
    suffix?: string | null
    gender?: string | null
    bday?: string | null
    vlastname?: string | null
    vfirstname?: string | null
    vmiddlename?: string | null
    vsuffix?: string | null
    vperAdd?: string | null
    timeVisit?: string | null
    dateVisit?: string | null
    relationship?: string | null
    contact?: string | null
  }

  export type VisitSchedUpdateInput = {
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    vlastname?: NullableStringFieldUpdateOperationsInput | string | null
    vfirstname?: NullableStringFieldUpdateOperationsInput | string | null
    vmiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    vsuffix?: NullableStringFieldUpdateOperationsInput | string | null
    vperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    timeVisit?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisit?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    visitor?: VisitorUpdateOneRequiredWithoutVisitSchedNestedInput
  }

  export type VisitSchedUncheckedUpdateInput = {
    visitorId?: StringFieldUpdateOperationsInput | string
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    vlastname?: NullableStringFieldUpdateOperationsInput | string | null
    vfirstname?: NullableStringFieldUpdateOperationsInput | string | null
    vmiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    vsuffix?: NullableStringFieldUpdateOperationsInput | string | null
    vperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    timeVisit?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisit?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VisitSchedCreateManyInput = {
    id?: string
    visitorId: string
    inmateNo?: string | null
    cellBlock?: string | null
    lastname?: string | null
    firstname?: string | null
    middlename?: string | null
    suffix?: string | null
    gender?: string | null
    bday?: string | null
    vlastname?: string | null
    vfirstname?: string | null
    vmiddlename?: string | null
    vsuffix?: string | null
    vperAdd?: string | null
    timeVisit?: string | null
    dateVisit?: string | null
    relationship?: string | null
    contact?: string | null
  }

  export type VisitSchedUpdateManyMutationInput = {
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    vlastname?: NullableStringFieldUpdateOperationsInput | string | null
    vfirstname?: NullableStringFieldUpdateOperationsInput | string | null
    vmiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    vsuffix?: NullableStringFieldUpdateOperationsInput | string | null
    vperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    timeVisit?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisit?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VisitSchedUncheckedUpdateManyInput = {
    visitorId?: StringFieldUpdateOperationsInput | string
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    vlastname?: NullableStringFieldUpdateOperationsInput | string | null
    vfirstname?: NullableStringFieldUpdateOperationsInput | string | null
    vmiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    vsuffix?: NullableStringFieldUpdateOperationsInput | string | null
    vperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    timeVisit?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisit?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    email_admin?: SortOrder
    password_admin?: SortOrder
    createdAt?: SortOrder
    shift?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    shift?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    email_admin?: SortOrder
    password_admin?: SortOrder
    createdAt?: SortOrder
    shift?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    email_admin?: SortOrder
    password_admin?: SortOrder
    createdAt?: SortOrder
    shift?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    shift?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type VisitSchedListRelationFilter = {
    every?: VisitSchedWhereInput
    some?: VisitSchedWhereInput
    none?: VisitSchedWhereInput
  }

  export type VisitSchedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VisitorCountOrderByAggregateInput = {
    id?: SortOrder
    email_visitor?: SortOrder
    password_visitor?: SortOrder
    createdAt?: SortOrder
    shift?: SortOrder
  }

  export type VisitorAvgOrderByAggregateInput = {
    shift?: SortOrder
  }

  export type VisitorMaxOrderByAggregateInput = {
    id?: SortOrder
    email_visitor?: SortOrder
    password_visitor?: SortOrder
    createdAt?: SortOrder
    shift?: SortOrder
  }

  export type VisitorMinOrderByAggregateInput = {
    id?: SortOrder
    email_visitor?: SortOrder
    password_visitor?: SortOrder
    createdAt?: SortOrder
    shift?: SortOrder
  }

  export type VisitorSumOrderByAggregateInput = {
    shift?: SortOrder
  }

  export type InmateRecordCountOrderByAggregateInput = {
    id?: SortOrder
    inmateNo?: SortOrder
    cellBlock?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    middlename?: SortOrder
    suffix?: SortOrder
    perAdd?: SortOrder
    gender?: SortOrder
    bday?: SortOrder
    civilstatus?: SortOrder
    eyeColor?: SortOrder
    crimeCom?: SortOrder
    sentence?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    elastname?: SortOrder
    efirstname?: SortOrder
    emiddlename?: SortOrder
    esuffix?: SortOrder
    eperAdd?: SortOrder
    relationship?: SortOrder
    contact?: SortOrder
  }

  export type InmateRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    inmateNo?: SortOrder
    cellBlock?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    middlename?: SortOrder
    suffix?: SortOrder
    perAdd?: SortOrder
    gender?: SortOrder
    bday?: SortOrder
    civilstatus?: SortOrder
    eyeColor?: SortOrder
    crimeCom?: SortOrder
    sentence?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    elastname?: SortOrder
    efirstname?: SortOrder
    emiddlename?: SortOrder
    esuffix?: SortOrder
    eperAdd?: SortOrder
    relationship?: SortOrder
    contact?: SortOrder
  }

  export type InmateRecordMinOrderByAggregateInput = {
    id?: SortOrder
    inmateNo?: SortOrder
    cellBlock?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    middlename?: SortOrder
    suffix?: SortOrder
    perAdd?: SortOrder
    gender?: SortOrder
    bday?: SortOrder
    civilstatus?: SortOrder
    eyeColor?: SortOrder
    crimeCom?: SortOrder
    sentence?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    elastname?: SortOrder
    efirstname?: SortOrder
    emiddlename?: SortOrder
    esuffix?: SortOrder
    eperAdd?: SortOrder
    relationship?: SortOrder
    contact?: SortOrder
  }

  export type VisitorRelationFilter = {
    is?: VisitorWhereInput
    isNot?: VisitorWhereInput
  }

  export type VisitSchedCountOrderByAggregateInput = {
    id?: SortOrder
    visitorId?: SortOrder
    inmateNo?: SortOrder
    cellBlock?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    middlename?: SortOrder
    suffix?: SortOrder
    gender?: SortOrder
    bday?: SortOrder
    vlastname?: SortOrder
    vfirstname?: SortOrder
    vmiddlename?: SortOrder
    vsuffix?: SortOrder
    vperAdd?: SortOrder
    timeVisit?: SortOrder
    dateVisit?: SortOrder
    relationship?: SortOrder
    contact?: SortOrder
  }

  export type VisitSchedMaxOrderByAggregateInput = {
    id?: SortOrder
    visitorId?: SortOrder
    inmateNo?: SortOrder
    cellBlock?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    middlename?: SortOrder
    suffix?: SortOrder
    gender?: SortOrder
    bday?: SortOrder
    vlastname?: SortOrder
    vfirstname?: SortOrder
    vmiddlename?: SortOrder
    vsuffix?: SortOrder
    vperAdd?: SortOrder
    timeVisit?: SortOrder
    dateVisit?: SortOrder
    relationship?: SortOrder
    contact?: SortOrder
  }

  export type VisitSchedMinOrderByAggregateInput = {
    id?: SortOrder
    visitorId?: SortOrder
    inmateNo?: SortOrder
    cellBlock?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    middlename?: SortOrder
    suffix?: SortOrder
    gender?: SortOrder
    bday?: SortOrder
    vlastname?: SortOrder
    vfirstname?: SortOrder
    vmiddlename?: SortOrder
    vsuffix?: SortOrder
    vperAdd?: SortOrder
    timeVisit?: SortOrder
    dateVisit?: SortOrder
    relationship?: SortOrder
    contact?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VisitSchedCreateNestedManyWithoutVisitorInput = {
    create?: XOR<Enumerable<VisitSchedCreateWithoutVisitorInput>, Enumerable<VisitSchedUncheckedCreateWithoutVisitorInput>>
    connectOrCreate?: Enumerable<VisitSchedCreateOrConnectWithoutVisitorInput>
    createMany?: VisitSchedCreateManyVisitorInputEnvelope
    connect?: Enumerable<VisitSchedWhereUniqueInput>
  }

  export type VisitSchedUncheckedCreateNestedManyWithoutVisitorInput = {
    create?: XOR<Enumerable<VisitSchedCreateWithoutVisitorInput>, Enumerable<VisitSchedUncheckedCreateWithoutVisitorInput>>
    connectOrCreate?: Enumerable<VisitSchedCreateOrConnectWithoutVisitorInput>
    createMany?: VisitSchedCreateManyVisitorInputEnvelope
    connect?: Enumerable<VisitSchedWhereUniqueInput>
  }

  export type VisitSchedUpdateManyWithoutVisitorNestedInput = {
    create?: XOR<Enumerable<VisitSchedCreateWithoutVisitorInput>, Enumerable<VisitSchedUncheckedCreateWithoutVisitorInput>>
    connectOrCreate?: Enumerable<VisitSchedCreateOrConnectWithoutVisitorInput>
    upsert?: Enumerable<VisitSchedUpsertWithWhereUniqueWithoutVisitorInput>
    createMany?: VisitSchedCreateManyVisitorInputEnvelope
    set?: Enumerable<VisitSchedWhereUniqueInput>
    disconnect?: Enumerable<VisitSchedWhereUniqueInput>
    delete?: Enumerable<VisitSchedWhereUniqueInput>
    connect?: Enumerable<VisitSchedWhereUniqueInput>
    update?: Enumerable<VisitSchedUpdateWithWhereUniqueWithoutVisitorInput>
    updateMany?: Enumerable<VisitSchedUpdateManyWithWhereWithoutVisitorInput>
    deleteMany?: Enumerable<VisitSchedScalarWhereInput>
  }

  export type VisitSchedUncheckedUpdateManyWithoutVisitorNestedInput = {
    create?: XOR<Enumerable<VisitSchedCreateWithoutVisitorInput>, Enumerable<VisitSchedUncheckedCreateWithoutVisitorInput>>
    connectOrCreate?: Enumerable<VisitSchedCreateOrConnectWithoutVisitorInput>
    upsert?: Enumerable<VisitSchedUpsertWithWhereUniqueWithoutVisitorInput>
    createMany?: VisitSchedCreateManyVisitorInputEnvelope
    set?: Enumerable<VisitSchedWhereUniqueInput>
    disconnect?: Enumerable<VisitSchedWhereUniqueInput>
    delete?: Enumerable<VisitSchedWhereUniqueInput>
    connect?: Enumerable<VisitSchedWhereUniqueInput>
    update?: Enumerable<VisitSchedUpdateWithWhereUniqueWithoutVisitorInput>
    updateMany?: Enumerable<VisitSchedUpdateManyWithWhereWithoutVisitorInput>
    deleteMany?: Enumerable<VisitSchedScalarWhereInput>
  }

  export type VisitorCreateNestedOneWithoutVisitSchedInput = {
    create?: XOR<VisitorCreateWithoutVisitSchedInput, VisitorUncheckedCreateWithoutVisitSchedInput>
    connectOrCreate?: VisitorCreateOrConnectWithoutVisitSchedInput
    connect?: VisitorWhereUniqueInput
  }

  export type VisitorUpdateOneRequiredWithoutVisitSchedNestedInput = {
    create?: XOR<VisitorCreateWithoutVisitSchedInput, VisitorUncheckedCreateWithoutVisitSchedInput>
    connectOrCreate?: VisitorCreateOrConnectWithoutVisitSchedInput
    upsert?: VisitorUpsertWithoutVisitSchedInput
    connect?: VisitorWhereUniqueInput
    update?: XOR<VisitorUpdateWithoutVisitSchedInput, VisitorUncheckedUpdateWithoutVisitSchedInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type VisitSchedCreateWithoutVisitorInput = {
    id?: string
    inmateNo?: string | null
    cellBlock?: string | null
    lastname?: string | null
    firstname?: string | null
    middlename?: string | null
    suffix?: string | null
    gender?: string | null
    bday?: string | null
    vlastname?: string | null
    vfirstname?: string | null
    vmiddlename?: string | null
    vsuffix?: string | null
    vperAdd?: string | null
    timeVisit?: string | null
    dateVisit?: string | null
    relationship?: string | null
    contact?: string | null
  }

  export type VisitSchedUncheckedCreateWithoutVisitorInput = {
    id?: string
    inmateNo?: string | null
    cellBlock?: string | null
    lastname?: string | null
    firstname?: string | null
    middlename?: string | null
    suffix?: string | null
    gender?: string | null
    bday?: string | null
    vlastname?: string | null
    vfirstname?: string | null
    vmiddlename?: string | null
    vsuffix?: string | null
    vperAdd?: string | null
    timeVisit?: string | null
    dateVisit?: string | null
    relationship?: string | null
    contact?: string | null
  }

  export type VisitSchedCreateOrConnectWithoutVisitorInput = {
    where: VisitSchedWhereUniqueInput
    create: XOR<VisitSchedCreateWithoutVisitorInput, VisitSchedUncheckedCreateWithoutVisitorInput>
  }

  export type VisitSchedCreateManyVisitorInputEnvelope = {
    data: Enumerable<VisitSchedCreateManyVisitorInput>
  }

  export type VisitSchedUpsertWithWhereUniqueWithoutVisitorInput = {
    where: VisitSchedWhereUniqueInput
    update: XOR<VisitSchedUpdateWithoutVisitorInput, VisitSchedUncheckedUpdateWithoutVisitorInput>
    create: XOR<VisitSchedCreateWithoutVisitorInput, VisitSchedUncheckedCreateWithoutVisitorInput>
  }

  export type VisitSchedUpdateWithWhereUniqueWithoutVisitorInput = {
    where: VisitSchedWhereUniqueInput
    data: XOR<VisitSchedUpdateWithoutVisitorInput, VisitSchedUncheckedUpdateWithoutVisitorInput>
  }

  export type VisitSchedUpdateManyWithWhereWithoutVisitorInput = {
    where: VisitSchedScalarWhereInput
    data: XOR<VisitSchedUpdateManyMutationInput, VisitSchedUncheckedUpdateManyWithoutVisitSchedInput>
  }

  export type VisitSchedScalarWhereInput = {
    AND?: Enumerable<VisitSchedScalarWhereInput>
    OR?: Enumerable<VisitSchedScalarWhereInput>
    NOT?: Enumerable<VisitSchedScalarWhereInput>
    id?: StringFilter | string
    visitorId?: StringFilter | string
    inmateNo?: StringNullableFilter | string | null
    cellBlock?: StringNullableFilter | string | null
    lastname?: StringNullableFilter | string | null
    firstname?: StringNullableFilter | string | null
    middlename?: StringNullableFilter | string | null
    suffix?: StringNullableFilter | string | null
    gender?: StringNullableFilter | string | null
    bday?: StringNullableFilter | string | null
    vlastname?: StringNullableFilter | string | null
    vfirstname?: StringNullableFilter | string | null
    vmiddlename?: StringNullableFilter | string | null
    vsuffix?: StringNullableFilter | string | null
    vperAdd?: StringNullableFilter | string | null
    timeVisit?: StringNullableFilter | string | null
    dateVisit?: StringNullableFilter | string | null
    relationship?: StringNullableFilter | string | null
    contact?: StringNullableFilter | string | null
  }

  export type VisitorCreateWithoutVisitSchedInput = {
    id?: string
    email_visitor: string
    password_visitor?: string | null
    createdAt?: Date | string
    shift: number
  }

  export type VisitorUncheckedCreateWithoutVisitSchedInput = {
    id?: string
    email_visitor: string
    password_visitor?: string | null
    createdAt?: Date | string
    shift: number
  }

  export type VisitorCreateOrConnectWithoutVisitSchedInput = {
    where: VisitorWhereUniqueInput
    create: XOR<VisitorCreateWithoutVisitSchedInput, VisitorUncheckedCreateWithoutVisitSchedInput>
  }

  export type VisitorUpsertWithoutVisitSchedInput = {
    update: XOR<VisitorUpdateWithoutVisitSchedInput, VisitorUncheckedUpdateWithoutVisitSchedInput>
    create: XOR<VisitorCreateWithoutVisitSchedInput, VisitorUncheckedCreateWithoutVisitSchedInput>
  }

  export type VisitorUpdateWithoutVisitSchedInput = {
    email_visitor?: StringFieldUpdateOperationsInput | string
    password_visitor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: IntFieldUpdateOperationsInput | number
  }

  export type VisitorUncheckedUpdateWithoutVisitSchedInput = {
    email_visitor?: StringFieldUpdateOperationsInput | string
    password_visitor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: IntFieldUpdateOperationsInput | number
  }

  export type VisitSchedCreateManyVisitorInput = {
    id?: string
    inmateNo?: string | null
    cellBlock?: string | null
    lastname?: string | null
    firstname?: string | null
    middlename?: string | null
    suffix?: string | null
    gender?: string | null
    bday?: string | null
    vlastname?: string | null
    vfirstname?: string | null
    vmiddlename?: string | null
    vsuffix?: string | null
    vperAdd?: string | null
    timeVisit?: string | null
    dateVisit?: string | null
    relationship?: string | null
    contact?: string | null
  }

  export type VisitSchedUpdateWithoutVisitorInput = {
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    vlastname?: NullableStringFieldUpdateOperationsInput | string | null
    vfirstname?: NullableStringFieldUpdateOperationsInput | string | null
    vmiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    vsuffix?: NullableStringFieldUpdateOperationsInput | string | null
    vperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    timeVisit?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisit?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VisitSchedUncheckedUpdateWithoutVisitorInput = {
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    vlastname?: NullableStringFieldUpdateOperationsInput | string | null
    vfirstname?: NullableStringFieldUpdateOperationsInput | string | null
    vmiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    vsuffix?: NullableStringFieldUpdateOperationsInput | string | null
    vperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    timeVisit?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisit?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VisitSchedUncheckedUpdateManyWithoutVisitSchedInput = {
    inmateNo?: NullableStringFieldUpdateOperationsInput | string | null
    cellBlock?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    middlename?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    bday?: NullableStringFieldUpdateOperationsInput | string | null
    vlastname?: NullableStringFieldUpdateOperationsInput | string | null
    vfirstname?: NullableStringFieldUpdateOperationsInput | string | null
    vmiddlename?: NullableStringFieldUpdateOperationsInput | string | null
    vsuffix?: NullableStringFieldUpdateOperationsInput | string | null
    vperAdd?: NullableStringFieldUpdateOperationsInput | string | null
    timeVisit?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisit?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}